// server.js
// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä Express –¥–ª—è Telegram Webhook (Node 18+)

const express = require('express');

const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const SECRET = process.env.TELEGRAM_WEBHOOK_SECRET; // –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∞–º–∏ –∏ –∑–∞–¥–∞–π—Ç–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏
const PORT = process.env.PORT || 3000;

if (!TOKEN) {
  console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è).');
}
if (!SECRET) {
  console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_WEBHOOK_SECRET (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è).');
}

const API = `https://api.telegram.org/bot${TOKEN}`;
const app = express();
app.use(express.json());

// –ü—Ä–æ—Å—Ç–æ–π healthcheck
app.get('/', (_req, res) => res.status(200).send('OK'));

async function tg(method, payload) {
  const res = await fetch(`${API}/${method}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload),
  });
  if (!res.ok) {
    const text = await res.text();
    throw new Error(`Telegram API error: ${res.status} ${text}`);
  }
  return res.json();
}

// –ú–∞—Ä—à—Ä—É—Ç –≤–µ–±—Ö—É–∫–∞: https://<–≤–∞—à-–¥–æ–º–µ–Ω>/webhook/<SECRET>
app.post(`/webhook/${SECRET}`, async (req, res) => {
  // –î–æ–ø. –∑–∞—â–∏—Ç–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –≤—ã –µ–≥–æ –∑–∞–¥–∞–¥–∏—Ç–µ –ø—Ä–∏ setWebhook
  const headerSecret = req.get('X-Telegram-Bot-Api-Secret-Token');
  if (headerSecret && headerSecret !== SECRET) {
    return res.status(401).send('Invalid secret token');
  }

  const update = req.body;

  try {
    if (update.message) {
      const chatId = update.message.chat.id;
      const text = update.message.text || '';

      if (text.startsWith('/start')) {
        await tg('sendMessage', {
          chat_id: chatId,
          text: '–ë–æ—Ç –∂–∏–≤! ‚ú® –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.',
        });
      } else {
        await tg('sendMessage', {
          chat_id: chatId,
          text: `–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: "${text}"`,
        });
      }
    }
  } catch (err) {
    console.error('Handler error:', err);
  }

  // –í–µ–±—Ö—É–∫—É –≤–∞–∂–Ω–æ –±—ã—Å—Ç—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
  res.sendStatus(200);
});

app.listen(PORT, () => {
  console.log(`üöÄ Server listening on port ${PORT}`);
  if (!TOKEN || !SECRET) {
    console.log('‚ÑπÔ∏è  –ó–∞–¥–∞–π—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_WEBHOOK_SECRET –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.');
  }
});
